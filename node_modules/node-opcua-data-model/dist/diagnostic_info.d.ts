import { BinaryStream, OutputBinaryStream } from "node-opcua-binary-stream";
import { BaseUAObject, DecodeDebugOptions, StructuredTypeSchema } from "node-opcua-factory";
import { StatusCode } from "node-opcua-status-code";
import { Int32, UAString } from "node-opcua-basic-types";
export declare const schemaDiagnosticInfo: StructuredTypeSchema;
export declare class DiagnosticInfo extends BaseUAObject {
    static schema: StructuredTypeSchema;
    static possibleFields: string[];
    symbolicId: Int32;
    namespaceURI: Int32;
    locale: Int32;
    localizedText: Int32;
    additionalInfo: UAString;
    innerStatusCode: StatusCode;
    innerDiagnosticInfo: DiagnosticInfo;
    /**
     *
     * @class DiagnosticInfo
     * @constructor
     * @extends BaseUAObject
     * @param  options {Object}
     */
    constructor(options?: DiagnosticInfoOptions);
    encode(stream: OutputBinaryStream): void;
    decode(stream: BinaryStream): void;
    decodeDebug(stream: BinaryStream, options: DecodeDebugOptions): void;
}
export interface DiagnosticInfoOptions {
    symbolicId?: Int32;
    namespaceURI?: Int32;
    locale?: Int32;
    localizedText?: Int32;
    additionalInfo?: UAString;
    innerStatusCode?: StatusCode;
    innerDiagnosticInfo?: DiagnosticInfo;
}
export declare enum DiagnosticInfo_EncodingByte {
    SymbolicId = 1,
    NamespaceURI = 2,
    LocalizedText = 4,
    Locale = 8,
    AdditionalInfo = 16,
    InnerStatusCode = 32,
    InnerDiagnosticInfo = 64
}
export declare function encodeDiagnosticInfo(value: DiagnosticInfo | null, stream: OutputBinaryStream): void;
export declare function decodeDiagnosticInfo(stream: BinaryStream, _value?: DiagnosticInfo | null): DiagnosticInfo;
