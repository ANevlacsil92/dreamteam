"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateAddressSpace = exports.readNodeSet2XmlFile = void 0;
const fs = require("fs");
const node_opcua_debug_1 = require("node-opcua-debug");
const __1 = require("..");
const doDebug = (0, node_opcua_debug_1.checkDebugFlag)(__filename);
const debugLog = (0, node_opcua_debug_1.make_debugLog)(__filename);
const errorLog = (0, node_opcua_debug_1.make_errorLog)(__filename);
function readNodeSet2XmlFile(xmlFile, callback) {
    // istanbul ignore next
    if (!fs.existsSync(xmlFile)) {
        const msg = "[NODE-OPCUA-E02] generateAddressSpace : cannot find nodeset2 xml file at " + xmlFile;
        errorLog(msg);
        return callback(new Error(msg));
    }
    debugLog(" parsing ", xmlFile);
    fs.readFile(xmlFile, "ascii", (err, xmlData) => {
        callback(err, xmlData);
    });
}
exports.readNodeSet2XmlFile = readNodeSet2XmlFile;
function generateAddressSpace(addressSpace, xmlFiles, callback) {
    (0, __1.generateAddressSpaceRawCallback)(addressSpace, xmlFiles, readNodeSet2XmlFile, callback);
}
exports.generateAddressSpace = generateAddressSpace;
// tslint:disable:no-var-requires
// tslint:disable:max-line-length
const thenify = require("thenify");
module.exports.generateAddressSpace = thenify.withCallback(module.exports.generateAddressSpace);
//# sourceMappingURL=generate_address_space.js.map